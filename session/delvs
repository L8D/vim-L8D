let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <S-Tab> <Plug>SuperTabBackward
inoremap <C-Tab> 	
inoremap <Plug>(fakeclip-screen-insert-p) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert-o) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert-r) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert) =fakeclip#content('pastebuffer')
inoremap <Plug>(fakeclip-insert-p) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-o) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-r) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert) =fakeclip#content('clipboard')
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
vmap "&D <Plug>(fakeclip-screen-D)
nmap "&D <Plug>(fakeclip-screen-D)
nmap "&dd <Plug>(fakeclip-screen-dd)
vmap "&d <Plug>(fakeclip-screen-d)
nmap "&d <Plug>(fakeclip-screen-d)
vmap "&[P <Plug>(fakeclip-screen-[P)
vmap "&[p <Plug>(fakeclip-screen-[p)
vmap "&]P <Plug>(fakeclip-screen-]P)
vmap "&]p <Plug>(fakeclip-screen-]p)
vmap "&gP <Plug>(fakeclip-screen-gP)
vmap "&gp <Plug>(fakeclip-screen-gp)
vmap "&P <Plug>(fakeclip-screen-P)
vmap "&p <Plug>(fakeclip-screen-p)
nmap "&[P <Plug>(fakeclip-screen-[P)
nmap "&[p <Plug>(fakeclip-screen-[p)
nmap "&]P <Plug>(fakeclip-screen-]P)
nmap "&]p <Plug>(fakeclip-screen-]p)
nmap "&gP <Plug>(fakeclip-screen-gP)
nmap "&gp <Plug>(fakeclip-screen-gp)
nmap "&P <Plug>(fakeclip-screen-P)
nmap "&p <Plug>(fakeclip-screen-p)
vmap "&Y <Plug>(fakeclip-screen-Y)
vmap "&y <Plug>(fakeclip-screen-y)
nmap "&yy <Plug>(fakeclip-screen-Y)
nmap "&Y <Plug>(fakeclip-screen-Y)
nmap "&y <Plug>(fakeclip-screen-y)
vmap "*D <Plug>(fakeclip-D)
nmap "*D <Plug>(fakeclip-D)
nmap "*dd <Plug>(fakeclip-dd)
vmap "*d <Plug>(fakeclip-d)
nmap "*d <Plug>(fakeclip-d)
vmap "*[P <Plug>(fakeclip-[P)
vmap "*[p <Plug>(fakeclip-[p)
vmap "*]P <Plug>(fakeclip-]P)
vmap "*]p <Plug>(fakeclip-]p)
vmap "*gP <Plug>(fakeclip-gP)
vmap "*gp <Plug>(fakeclip-gp)
vmap "*P <Plug>(fakeclip-P)
vmap "*p <Plug>(fakeclip-p)
nmap "*[P <Plug>(fakeclip-[P)
nmap "*[p <Plug>(fakeclip-[p)
nmap "*]P <Plug>(fakeclip-]P)
nmap "*]p <Plug>(fakeclip-]p)
nmap "*gP <Plug>(fakeclip-gP)
nmap "*gp <Plug>(fakeclip-gp)
nmap "*P <Plug>(fakeclip-P)
nmap "*p <Plug>(fakeclip-p)
vmap "*Y <Plug>(fakeclip-Y)
vmap "*y <Plug>(fakeclip-y)
nmap "*yy <Plug>(fakeclip-Y)
nmap "*Y <Plug>(fakeclip-Y)
nmap "*y <Plug>(fakeclip-y)
vmap "+D <Plug>(fakeclip-D)
nmap "+D <Plug>(fakeclip-D)
nmap "+dd <Plug>(fakeclip-dd)
vmap "+d <Plug>(fakeclip-d)
nmap "+d <Plug>(fakeclip-d)
vmap "+[P <Plug>(fakeclip-[P)
vmap "+[p <Plug>(fakeclip-[p)
vmap "+]P <Plug>(fakeclip-]P)
vmap "+]p <Plug>(fakeclip-]p)
vmap "+gP <Plug>(fakeclip-gP)
vmap "+gp <Plug>(fakeclip-gp)
vmap "+P <Plug>(fakeclip-P)
vmap "+p <Plug>(fakeclip-p)
nmap "+[P <Plug>(fakeclip-[P)
nmap "+[p <Plug>(fakeclip-[p)
nmap "+]P <Plug>(fakeclip-]P)
nmap "+]p <Plug>(fakeclip-]p)
nmap "+gP <Plug>(fakeclip-gP)
nmap "+gp <Plug>(fakeclip-gp)
nmap "+P <Plug>(fakeclip-P)
nmap "+p <Plug>(fakeclip-p)
vmap "+Y <Plug>(fakeclip-Y)
vmap "+y <Plug>(fakeclip-y)
nmap "+yy <Plug>(fakeclip-Y)
nmap "+Y <Plug>(fakeclip-Y)
nmap "+y <Plug>(fakeclip-y)
vnoremap ,l may`a:exe "!dict -P - $(echo " . @" . "| recode latin1..utf-8)"
nnoremap ,l mayiw`a:exe "!dict -P - $(echo " . @" . "| recode latin1..utf-8)"
vmap [% [%m'gv``
nmap \ca <Plug>NERDCommenterAltDelims
vmap \cA <Plug>NERDCommenterAppend
nmap \cA <Plug>NERDCommenterAppend
vmap \c$ <Plug>NERDCommenterToEOL
nmap \c$ <Plug>NERDCommenterToEOL
vmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
vmap \cn <Plug>NERDCommenterNest
nmap \cn <Plug>NERDCommenterNest
vmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
vmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
vmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
vmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
vmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
vmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
vmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
vmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
vmap ]% ]%m'gv``
vmap a% [%v]%
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
vnoremap <silent> <Plug>(fakeclip-screen-D) :call fakeclip#delete('pastebuffer', 'V')
nnoremap <silent> <Plug>(fakeclip-screen-D) :set operatorfunc=fakeclip#pastebuffer_deleteg@$
nnoremap <silent> <Plug>(fakeclip-screen-dd) :set operatorfunc=fakeclip#pastebuffer_deleteg@g@
vnoremap <silent> <Plug>(fakeclip-screen-d) :call fakeclip#delete('pastebuffer', visualmode())
nnoremap <silent> <Plug>(fakeclip-screen-d) :set operatorfunc=fakeclip#pastebuffer_deleteg@
vnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('pastebuffer', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('pastebuffer', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('pastebuffer', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('pastebuffer', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('pastebuffer', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('pastebuffer', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('pastebuffer', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('pastebuffer', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('pastebuffer', '', '[P')
nnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('pastebuffer', '', '[p')
nnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('pastebuffer', '', ']P')
nnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('pastebuffer', '', ']p')
nnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('pastebuffer', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('pastebuffer', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('pastebuffer', '', 'P')
nnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('pastebuffer', '', 'p')
vnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank('pastebuffer', 'V')
nnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank_Y('pastebuffer')
vnoremap <silent> <Plug>(fakeclip-screen-y) :call fakeclip#yank('pastebuffer', visualmode())
nnoremap <silent> <Plug>(fakeclip-screen-y) :set operatorfunc=fakeclip#pastebuffer_yankg@
vnoremap <silent> <Plug>(fakeclip-D) :call fakeclip#delete('clipboard', 'V')
nnoremap <silent> <Plug>(fakeclip-D) :set operatorfunc=fakeclip#clipboard_deleteg@$
nnoremap <silent> <Plug>(fakeclip-dd) :set operatorfunc=fakeclip#clipboard_deleteg@g@
vnoremap <silent> <Plug>(fakeclip-d) :call fakeclip#delete('clipboard', visualmode())
nnoremap <silent> <Plug>(fakeclip-d) :set operatorfunc=fakeclip#clipboard_deleteg@
vnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', '', '[P')
nnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', '', '[p')
nnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', '', ']P')
nnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', '', ']p')
nnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', '', 'P')
nnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', '', 'p')
vnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank('clipboard', 'V')
nnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank_Y('clipboard')
vnoremap <silent> <Plug>(fakeclip-y) :call fakeclip#yank('clipboard', visualmode())
nnoremap <silent> <Plug>(fakeclip-y) :set operatorfunc=fakeclip#clipboard_yankg@
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
imap 	 <Plug>SuperTabForward
imap  <Plug>SuperTabForward
imap  <Plug>SuperTabBackward
imap & <Plug>(fakeclip-screen-insert-p)
map! & <Plug>(fakeclip-screen-insert-o)
map! & <Plug>(fakeclip-screen-insert-r)
map! & <Plug>(fakeclip-screen-insert)
imap * <Plug>(fakeclip-insert-p)
map! * <Plug>(fakeclip-insert-o)
map! * <Plug>(fakeclip-insert-r)
map! * <Plug>(fakeclip-insert)
imap + <Plug>(fakeclip-insert-p)
map! + <Plug>(fakeclip-insert-o)
map! + <Plug>(fakeclip-insert-r)
map! + <Plug>(fakeclip-insert)
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set background=dark
set backspace=indent,eol,start
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=50
set ignorecase
set laststatus=2
set pastetoggle=<F2>
set ruler
set runtimepath=~/.vim,~/.vim/bundle/fugitive,~/.vim/bundle/matchit,~/.vim/bundle/nerdtree,~/.vim/bundle/syntastic,~/.vim/bundle/vim-colors-solarized,~/.vim/bundle/vim-gitgutter,~/.vim/bundle/vim-markdown,~/.vim/bundle/vim-startify,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim/bundle/vim-markdown/after,~/.vim/after
set scrolloff=4
set shiftwidth=2
set smartcase
set smartindent
set statusline=%!pyeval('powerline.new_window()')
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=2
set undodir=~/.vim_runtime/temp_dirs/undodir
set undofile
set viminfo=%,'100,<50,s10,h
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/git/delvs
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +7 ~/.vimrc
badd +0 delvs.h
badd +0 main.c
silent! argdel *
edit delvs.h
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(1)')
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 41) / 82)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit main.c
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'c'
setlocal filetype=c
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(2)')
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'c'
setlocal syntax=c
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 41) / 82)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
